input {
  http_poller {
    # Define the API request
    urls => {
      weather_data => {
        method => "GET"
        url => "https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/Bucharest,RO?unitGroup=metric&key=9EDRW7YK3SRVSF56YVM7BSC5W"
      }
    }
    request_timeout => 60
    schedule => { cron => "*/15 * * * *" } # Run every 15 minutes
    codec => "json" # Automatically parses JSON responses
    metadata_target => "http_poller_metadata"
  }
}


filter {
  # Example filter to extract and structure the weather datas
  prune {
    blacklist_names => [ "days", "http_poller_metadata", "stations" ]
  }
  mutate {
    rename => { "[currentConditions][icon]" => "[conditions][status]" }
    rename => { "[currentConditions][conditions]" => "[conditions][description]" }
    rename => { "[currentConditions][temp]" => "[conditions][temperature]" }
    rename => { "[currentConditions][humidity]" => "[conditions][humidity]" }
    rename => { "[currentConditions][windspeed]" => "[conditions][windspeed]" }
    rename => { "[currentConditions][winddir]" => "[conditions][winddir]" }
    rename => { "[currentConditions][pressure]" => "[conditions][pressure]" }
    rename => { "[currentConditions][precip]" => "[conditions][precip]" }
    rename => { "[currentConditions][precipprob]" => "[conditions][precipprob]" }
    rename => { "[currentConditions][preciptype]" => "[conditions][preciptype]" }
    rename => { "[currentConditions][cloudcover]" => "[conditions][cloudcover]" }
    rename => { "[currentConditions][sunrise]" => "[sunrise]" }
    rename => { "[currentConditions][sunset]" => "[sunset]" }
    rename => { "[currentConditions][moonphase]" => "[moonphase]" }
    rename => { "description" => "forecast" }
    rename => { "address" => "[location][address]" }
    rename => { "resolvedAddress" => "[location][resolvedAddress]" }
    rename => { "city" => "[location][city]" }
    rename => { "latitude" => "[location][latitude]" }
    rename => { "longitude" => "[location][longitude]" }
    rename => { "timezone" => "[timedata][timezone]" }
    rename => { "tzoffset" => "[timedata][tzoffset]" }
    rename => { "tzoffset" => "[timedata][tzoffset]" }
    add_field => { "source" => "OpenWeatherMap" }
    add_field => { "iconUrl" => "https://openweathermap.org/img/wn/" }
    add_field => { "[temp][iconUrlAffix]" => "@4x.png" }
    add_field => { "[temp][iconId]" => "01" } # Icon ID placeholder
    add_field => { "[temp][don]" => "d" } # Day or night indicator
  }
  
  # Build the iconUrl field
  # - Translate the icon ID to the corresponding icon URL
  translate {
    source => "[conditions][status]"
    target => "[temp][iconId]"
    override => true
    dictionary_path => "mappings/iconId.yml"
    fallback => "01" # Default icon ID
  }

  # - Set the day or night indicator
  ruby {
    code => "
      require 'time'

      sunrise_str = event.get('sunrise')
      sunset_str = event.get('sunset')
      timestamp = event.get('@timestamp')
      tz_offset = event.get('[timedata][tzoffset]').to_i * 3600  # Convert hours to seconds

      if sunrise_str && sunset_str && timestamp && tz_offset
        # Convert @timestamp to local date based on tz_offset
        local_date = (Time.at(timestamp.to_i) + tz_offset).strftime('%Y-%m-%d')

        # Construct full datetime strings
        sunrise = LogStash::Timestamp.new(Time.parse(local_date + ' ' + sunrise_str) - tz_offset)
        sunset = LogStash::Timestamp.new(Time.parse(local_date + ' ' + sunset_str) - tz_offset)

        # Compare with @timestamp (which is in UTC)
        event.set('[temp][don]', (sunrise < timestamp && timestamp < sunset) ? 'd' : 'n')
      end
    "
  }

  # - Build the icon URL
  mutate {
    update => { "[iconUrl]" => "%{[iconUrl]}%{[temp][iconId]}%{[temp][don]}%{[temp][iconUrlAffix]}" }
  }

  # TO DO: Handle the alerts
  # - Check if this alert series has been emailed before
  elasticsearch {
    hosts => "${ELASTIC_HOSTS}"
    user => "${ELASTIC_USER}"
    password => "${ELASTIC_PASSWORD}"
    cacert => "certs/ca/ca.crt"
    index => "logstash-*"
    query => '{
      "query": {
        "bool": {
          "must": [
            { "match": { "source": "OpenWeatherMap" } },
            { "match": { "location.resolvedAddress": "Bucharest, Romania" } },
            { "match": { "[alerts][id]": "%{[alerts][id]}" } }
          ],
          "must_not": [
            { "match": { "tags": "email_sent" } }
          ]
        }
      }
    }'
    fields => { "[alerts][id]" => "[temp][alets_id]" }
  }

  # - If not, mark the first alert in series as sent and ignore the rest
  if [[temp][alets_id]] {
    mutate { add_tag => "email_sent" }
  }

  # Remove unnecessary fields
  mutate {
    remove_field => [ "currentConditions", "event", "queryCost", "temp" ]
  }
}


output {
  if [alert][id] {
    pipeline {
      send_to => [ "alert" ]
    }
  }

  elasticsearch {
    index => "logstash-%{+YYYY.MM.dd}"
    hosts=> "${ELASTIC_HOSTS}"
    user=> "${ELASTIC_USER}"
    password=> "${ELASTIC_PASSWORD}"
    cacert=> "certs/ca/ca.crt"
  }
}
